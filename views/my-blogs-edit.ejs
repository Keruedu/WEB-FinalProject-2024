<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Blog Create | Play Tailwind</title>
  <link rel="shortcut icon" href="/images/favicon.png" type="image/x-icon" />
  <link rel="stylesheet" href="/css/animate.css" />
  <link rel="stylesheet" href="/css/tailwind.css" />
  <link rel="stylesheet" href="/css/ckeditor.css" />
  <link rel="stylesheet" href="https://cdn.ckeditor.com/ckeditor5/44.1.0/ckeditor5.css" />

  <!-- sweetalert2 -->
  <!-- jquery -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> 
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> 
  <!-- ==== WOW JS ==== -->
  <script src="/js/wow.min.js"></script>
  <script src="https://cdn.ckeditor.com/ckeditor5/44.1.0/ckeditor5.umd.js"></script>
  <script>
    new WOW().init();
  </script>
</head>

<body>
  <!-- ====== Navbar Section Start -->
  <%- include('partials/navbar') %>
  <!-- ====== Navbar Section End -->

  <!-- ====== Banner Section Start -->
  <div class="relative z-10 overflow-hidden pt-[120px] pb-[60px] md:pt-[130px] lg:pt-[160px] dark:bg-dark">
    <div
      class="absolute bottom-0 left-0 w-full h-px bg-gradient-to-r from-stroke/0 via-stroke dark:via-dark-3 to-stroke/0">
    </div>
    <div class="container">
      <div class="flex flex-wrap items-center -mx-4">
        <div class="w-full px-4">
          <div class="text-center">
            <h1 class="mb-4 text-3xl font-bold text-dark dark:text-white sm:text-4xl md:text-[40px] md:leading-[1.2]">
              Blog Edit Page</h1>
            <p class="mb-5 text-base text-body-color dark:text-dark-6">
              There are many variations of passages of Lorem Ipsum available.
            </p>

            <ul class="flex items-center justify-center gap-[10px]">
              <li>
                <a href="../index"
                  class="flex items-center gap-[10px] text-base font-medium text-dark dark:text-white">
                  Home
                </a>
              </li>
              <li>
                <a href="javascript:void(0)" class="flex items-center gap-[10px] text-base font-medium text-body-color">
                  <span class="text-body-color dark:text-dark-6"> / </span>
                  Edit
                </a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- ====== Banner Section End -->

  <!-- ====== EditBlog Section Start -->
  <section class="pt-20 pb-10 lg:pt-[80px] lg:pb-20 dark:bg-dark">
    <div class="container">
      <form id="editForm" action="/my-blogs/<%= blog._id %>" method="post" class="flex flex-col flex-wrap items-center justify-center gap-4 pb-20 w-full md:w-[80%] mx-auto" enctype="multipart/form-data">
        <input type="text" name="title" id="title" placeholder="Title" value="<%= blog.title %>"
          class="w-full md:w-full px-5 py-3 text-base transition border rounded-md outline-none border-stroke dark:border-dark-3 text-body-color dark:text-dark-700 placeholder:text-dark-6 focus:border-primary dark:focus:border-primary focus-visible:shadow-none" />
        <span id="titleError" class="text-red-500 hidden">Title is required</span>
  
        <div class="flex items-center gap-4 self-start">
          <button type="button" onclick="document.getElementById('imageInput').click()" class="px-9 py-9 rounded border dark:border-bg-white dark:border-bg-dark max-w-[250px] flex flex-row gap-1 justify-center items-center text-dark-700 dark:text-white hover:text-primary hover:border-primary transition">
            <input type="file" id="imageInput" name="image" accept="image/*" class="hidden" onchange="previewImage(event)" />
            <svg class="w-8 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M149.1 64.8L138.7 96 64 96C28.7 96 0 124.7 0 160L0 416c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-256c0-35.3-28.7-64-64-64l-74.7 0L362.9 64.8C356.4 45.2 338.1 32 317.4 32L194.6 32c-20.7 0-39 13.2-45.5 32.8zM256 192a96 96 0 1 1 0 192 96 96 0 1 1 0-192z"/></svg>
            <span>Thumbnail</span>
          </button>
          <img id="imagePreview" src="<%= blog.imageUrl %>" alt="Image Preview" class="w-32 h-32 object-cover rounded-md border border-stroke dark:border-dark-3" />
        </div>
  
        <div class="main-container w-full border border-stroke dark:border-dark-3 rounded-md">
          <div class="editor-container editor-container_classic-editor editor-container_include-block-toolbar" id="editor-container">
            <div class="editor-container__editor"><textarea name="content" id="editor" placeholder="Content"><%= blog.content %></textarea></div>
          </div>
        </div>

        <select name="category" id="category" class="w-full md:w-full px-5 py-3 text-base transition border rounded-md outline-none border-stroke dark:border-dark-3 text-body-color dark:text-dark-700 focus:border-primary dark:focus:border-primary focus-visible:shadow-none">
          <% categories.forEach(category => { %>
            <option value="<%= category._id %>" <%= blog.category._id.toString() === category._id.toString() ? 'selected' : '' %>><%= category.name %></option>
          <% }) %>
        </select>
  
        <div id="tagTodoList" class="w-full md:w-full px-5 py-3 text-base transition border rounded-md outline-none border-stroke dark:border-dark-3 text-body-color dark:text-dark-700 focus:border-primary dark:focus:border-primary focus-visible:shadow-none">
          <input type="text" id="tagInput" placeholder="Add a tag" class="w-full px-3 py-2 mb-2 border rounded-md" />
          <ul id="tagList" class="flex flex-row items-center gap-[10px] flex-wrap dark:text-white text-white">
            <% blog.tags.forEach(tag => { %>
              <li class="pl-3 h-10 text-dark-700 dark:text-white bg-primary rounded"><%= tag.name %><button type="button" onclick="removeTag(this)" class="ml-2 px-2 bg-gray-700 h-full text-white rounded-e">x</button></li>
            <% }) %>
          </ul>
        </div>
        <input type="hidden" name="tags" id="tagsInput" value="<%= blog.tags.map(tag => tag.name).join(',') %>" />
  
        <button type="submit" class="w-full md:w-auto px-5 py-3 text-base text-white transition duration-300 ease-in-out border rounded-md cursor-pointer border-primary bg-primary hover:bg-blue-dark">Update</button>
      </form>
    </div>
  </section>
  <!-- ====== EditBlog Section End -->

  <!-- ====== Footer Section Start -->
  <%- include('partials/footer') %>
  <!-- ====== Footer Section End -->

  <!-- ====== Back To Top Start -->
  <a href="javascript:void(0)"
    class="back-to-top fixed bottom-8 right-8 left-auto z-[999] hidden h-10 w-10 items-center justify-center rounded-md bg-primary text-white shadow-md transition duration-300 ease-in-out hover:bg-dark">
    <span class="mt-[6px] h-3 w-3 rotate-45 border-t border-l border-white"></span>
  </a>
  <!-- ====== Back To Top End -->

  <!-- ====== All Scripts -->
  <script src="/js/main.js"></script>
  <script src="/js/ckeditor.js"></script>
  <script src="/js/alerts.js"></script>
  <script>
    initializeCKEditor('#editor');
  </script>
    </script>
    <!-- Add and remove tags -->
    <script>
      function previewImage(event) {
        const input = event.target;
        const reader = new FileReader();
        reader.onload = function() {
          const imagePreview = document.getElementById('imagePreview');
          imagePreview.src = reader.result;
          imagePreview.classList.remove('hidden');
        };
        reader.readAsDataURL(input.files[0]);
      }

      document.getElementById('tagInput').addEventListener('keypress', function (e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          addTag();
        }
      });
    
      function addTag() {
        const tagInput = document.getElementById('tagInput');
        const tagList = document.getElementById('tagList');
        const tagsInput = document.getElementById('tagsInput');
    
        if (tagInput.value.trim() !== '') {
          const li = document.createElement('li');
          li.classList.add('pl-3', 'h-10', 'text-dark-700', 'dark:text-white', 'bg-primary', 'rounded');
          li.textContent = tagInput.value.trim();
          li.innerHTML += '<button type="button" onclick="removeTag(this)" class="ml-2 px-2 bg-gray-700 h-full text-white rounded-e">x</button>';
          tagList.appendChild(li);
    
          updateTagsInput();
          tagInput.value = '';
        }
      }
    
      function removeTag(button) {
        const li = button.parentElement;
        li.remove();
        updateTagsInput();
      }
    
      function updateTagsInput() {
        const tagList = document.getElementById('tagList');
        const tagsInput = document.getElementById('tagsInput');
        const tags = [];
    
        tagList.querySelectorAll('li').forEach(li => {
          tags.push(li.textContent.replace(' Remove', ''));
        });
    
        tagsInput.value = tags.join(',');
      }
    </script>
  <!-- Ajax -->
  <script>
    $(document).ready(function() {
      $('#editForm').on('submit', function(event) {
        event.preventDefault(); // Ngăn chặn form submit mặc định

        // Lấy giá trị của các thẻ từ #tagList
        const tags = [];
        $('#tagList li').each(function() {
          tags.push($(this).text().replace('x', '').trim());
        });

        // Gán giá trị mảng thẻ cho #tagsInput
        $('#tagsInput').val(tags.join(','));
        console.log($('#tagsInput').val());

        var formData = new FormData(this);

        // Log tất cả các cặp key-value trong FormData
        for (var pair of formData.entries()) {
          console.log(pair[0] + ': ' + pair[1]);
        }

        $.ajax({
          url: '/my-blogs/<%= blog._id %>',
          type: 'POST',
          data: formData,
          contentType: false,
          processData: false,
          success: function(response) {
            // Xử lý khi thành công
            showSuccessAlert(response.success_msg, '/my-blogs');
          },
          error: function(xhr) {
            const errors = xhr.responseJSON.errors;
            let errorList = '<ul class="error-list mb-4">';
            
            if (typeof errors === 'object' && errors !== null) {
              Object.keys(errors).forEach(function(key) {
                if (errors[key]) {
                  errorList += `<li class="error-item text-red-500 dark:text-red-300">${errors[key]}</li>`;
                }
              });
            } else {
              errorList += `<li class="error-item text-red-500 dark:text-red-300">An unexpected error occurred.</li>`;
            }

            errorList += '</ul>';

            showErrorAlert(errorList);
          }
        });
      });
    });
  </script>
</body>

</html>